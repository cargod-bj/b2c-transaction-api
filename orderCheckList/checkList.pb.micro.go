// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderCheckList/checkList.proto

package orderCheckList

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CheckList service

func NewCheckListEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CheckList service

type CheckListService interface {
	Add(ctx context.Context, in *CheckListDto, opts ...client.CallOption) (*common.Response, error)
	Delete(ctx context.Context, in *CheckListDto, opts ...client.CallOption) (*common.Response, error)
	Update(ctx context.Context, in *CheckListDto, opts ...client.CallOption) (*common.Response, error)
}

type checkListService struct {
	c    client.Client
	name string
}

func NewCheckListService(name string, c client.Client) CheckListService {
	return &checkListService{
		c:    c,
		name: name,
	}
}

func (c *checkListService) Add(ctx context.Context, in *CheckListDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CheckList.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkListService) Delete(ctx context.Context, in *CheckListDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CheckList.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkListService) Update(ctx context.Context, in *CheckListDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "CheckList.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CheckList service

type CheckListHandler interface {
	Add(context.Context, *CheckListDto, *common.Response) error
	Delete(context.Context, *CheckListDto, *common.Response) error
	Update(context.Context, *CheckListDto, *common.Response) error
}

func RegisterCheckListHandler(s server.Server, hdlr CheckListHandler, opts ...server.HandlerOption) error {
	type checkList interface {
		Add(ctx context.Context, in *CheckListDto, out *common.Response) error
		Delete(ctx context.Context, in *CheckListDto, out *common.Response) error
		Update(ctx context.Context, in *CheckListDto, out *common.Response) error
	}
	type CheckList struct {
		checkList
	}
	h := &checkListHandler{hdlr}
	return s.Handle(s.NewHandler(&CheckList{h}, opts...))
}

type checkListHandler struct {
	CheckListHandler
}

func (h *checkListHandler) Add(ctx context.Context, in *CheckListDto, out *common.Response) error {
	return h.CheckListHandler.Add(ctx, in, out)
}

func (h *checkListHandler) Delete(ctx context.Context, in *CheckListDto, out *common.Response) error {
	return h.CheckListHandler.Delete(ctx, in, out)
}

func (h *checkListHandler) Update(ctx context.Context, in *CheckListDto, out *common.Response) error {
	return h.CheckListHandler.Update(ctx, in, out)
}
