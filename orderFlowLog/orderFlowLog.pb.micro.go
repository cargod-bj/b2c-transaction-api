// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: orderFlowLog/orderFlowLog.proto

package orderFlowLog

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for OrderFlowLog service

func NewOrderFlowLogEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for OrderFlowLog service

type OrderFlowLogService interface {
	Add(ctx context.Context, in *OrderFlowLogDto, opts ...client.CallOption) (*common.Response, error)
	Delete(ctx context.Context, in *OrderFlowLogDto, opts ...client.CallOption) (*common.Response, error)
	Update(ctx context.Context, in *OrderFlowLogDto, opts ...client.CallOption) (*common.Response, error)
}

type orderFlowLogService struct {
	c    client.Client
	name string
}

func NewOrderFlowLogService(name string, c client.Client) OrderFlowLogService {
	return &orderFlowLogService{
		c:    c,
		name: name,
	}
}

func (c *orderFlowLogService) Add(ctx context.Context, in *OrderFlowLogDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "OrderFlowLog.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderFlowLogService) Delete(ctx context.Context, in *OrderFlowLogDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "OrderFlowLog.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderFlowLogService) Update(ctx context.Context, in *OrderFlowLogDto, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "OrderFlowLog.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderFlowLog service

type OrderFlowLogHandler interface {
	Add(context.Context, *OrderFlowLogDto, *common.Response) error
	Delete(context.Context, *OrderFlowLogDto, *common.Response) error
	Update(context.Context, *OrderFlowLogDto, *common.Response) error
}

func RegisterOrderFlowLogHandler(s server.Server, hdlr OrderFlowLogHandler, opts ...server.HandlerOption) error {
	type orderFlowLog interface {
		Add(ctx context.Context, in *OrderFlowLogDto, out *common.Response) error
		Delete(ctx context.Context, in *OrderFlowLogDto, out *common.Response) error
		Update(ctx context.Context, in *OrderFlowLogDto, out *common.Response) error
	}
	type OrderFlowLog struct {
		orderFlowLog
	}
	h := &orderFlowLogHandler{hdlr}
	return s.Handle(s.NewHandler(&OrderFlowLog{h}, opts...))
}

type orderFlowLogHandler struct {
	OrderFlowLogHandler
}

func (h *orderFlowLogHandler) Add(ctx context.Context, in *OrderFlowLogDto, out *common.Response) error {
	return h.OrderFlowLogHandler.Add(ctx, in, out)
}

func (h *orderFlowLogHandler) Delete(ctx context.Context, in *OrderFlowLogDto, out *common.Response) error {
	return h.OrderFlowLogHandler.Delete(ctx, in, out)
}

func (h *orderFlowLogHandler) Update(ctx context.Context, in *OrderFlowLogDto, out *common.Response) error {
	return h.OrderFlowLogHandler.Update(ctx, in, out)
}
