// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: consultation/consultation.proto

package consultation

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Consultation service

func NewConsultationEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Consultation service

type ConsultationService interface {
	//新增沟通记录，返回data.nil
	AddConsultation(ctx context.Context, in *ConsultationRecordDTO, opts ...client.CallOption) (*common.Response, error)
	//获取有效 call me back
	GetEffectiveConsultation(ctx context.Context, in *EffectiveConsultationCond, opts ...client.CallOption) (*common.Response, error)
	// 获取需要发送Google的数据
	GetNeedSent2GoogleConsultation(ctx context.Context, in *NsgConsultationCond, opts ...client.CallOption) (*common.Response, error)
	// 更新Consultation
	UpdateConsultation(ctx context.Context, in *ConsultationRecordDTO, opts ...client.CallOption) (*common.Response, error)
}

type consultationService struct {
	c    client.Client
	name string
}

func NewConsultationService(name string, c client.Client) ConsultationService {
	return &consultationService{
		c:    c,
		name: name,
	}
}

func (c *consultationService) AddConsultation(ctx context.Context, in *ConsultationRecordDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Consultation.AddConsultation", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationService) GetEffectiveConsultation(ctx context.Context, in *EffectiveConsultationCond, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Consultation.GetEffectiveConsultation", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationService) GetNeedSent2GoogleConsultation(ctx context.Context, in *NsgConsultationCond, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Consultation.GetNeedSent2GoogleConsultation", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consultationService) UpdateConsultation(ctx context.Context, in *ConsultationRecordDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Consultation.updateConsultation", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Consultation service

type ConsultationHandler interface {
	//新增沟通记录，返回data.nil
	AddConsultation(context.Context, *ConsultationRecordDTO, *common.Response) error
	//获取有效 call me back
	GetEffectiveConsultation(context.Context, *EffectiveConsultationCond, *common.Response) error
	// 获取需要发送Google的数据
	GetNeedSent2GoogleConsultation(context.Context, *NsgConsultationCond, *common.Response) error
	// 更新Consultation
	UpdateConsultation(context.Context, *ConsultationRecordDTO, *common.Response) error
}

func RegisterConsultationHandler(s server.Server, hdlr ConsultationHandler, opts ...server.HandlerOption) error {
	type consultation interface {
		AddConsultation(ctx context.Context, in *ConsultationRecordDTO, out *common.Response) error
		GetEffectiveConsultation(ctx context.Context, in *EffectiveConsultationCond, out *common.Response) error
		GetNeedSent2GoogleConsultation(ctx context.Context, in *NsgConsultationCond, out *common.Response) error
		UpdateConsultation(ctx context.Context, in *ConsultationRecordDTO, out *common.Response) error
	}
	type Consultation struct {
		consultation
	}
	h := &consultationHandler{hdlr}
	return s.Handle(s.NewHandler(&Consultation{h}, opts...))
}

type consultationHandler struct {
	ConsultationHandler
}

func (h *consultationHandler) AddConsultation(ctx context.Context, in *ConsultationRecordDTO, out *common.Response) error {
	return h.ConsultationHandler.AddConsultation(ctx, in, out)
}

func (h *consultationHandler) GetEffectiveConsultation(ctx context.Context, in *EffectiveConsultationCond, out *common.Response) error {
	return h.ConsultationHandler.GetEffectiveConsultation(ctx, in, out)
}

func (h *consultationHandler) GetNeedSent2GoogleConsultation(ctx context.Context, in *NsgConsultationCond, out *common.Response) error {
	return h.ConsultationHandler.GetNeedSent2GoogleConsultation(ctx, in, out)
}

func (h *consultationHandler) UpdateConsultation(ctx context.Context, in *ConsultationRecordDTO, out *common.Response) error {
	return h.ConsultationHandler.UpdateConsultation(ctx, in, out)
}
