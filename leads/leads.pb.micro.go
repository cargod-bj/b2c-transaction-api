// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: leads/leads.proto

package leads

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/any"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Leads service

func NewLeadsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Leads service

type LeadsService interface {
	Add(ctx context.Context, in *LeadsDTO, opts ...client.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteId, opts ...client.CallOption) (*Response, error)
	Update(ctx context.Context, in *LeadsDTO, opts ...client.CallOption) (*Response, error)
	GetList(ctx context.Context, in *LeadsCondition, opts ...client.CallOption) (*Response, error)
}

type leadsService struct {
	c    client.Client
	name string
}

func NewLeadsService(name string, c client.Client) LeadsService {
	return &leadsService{
		c:    c,
		name: name,
	}
}

func (c *leadsService) Add(ctx context.Context, in *LeadsDTO, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Leads.Add", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadsService) Delete(ctx context.Context, in *DeleteId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Leads.Delete", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadsService) Update(ctx context.Context, in *LeadsDTO, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Leads.Update", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leadsService) GetList(ctx context.Context, in *LeadsCondition, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Leads.GetList", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Leads service

type LeadsHandler interface {
	Add(context.Context, *LeadsDTO, *Response) error
	Delete(context.Context, *DeleteId, *Response) error
	Update(context.Context, *LeadsDTO, *Response) error
	GetList(context.Context, *LeadsCondition, *Response) error
}

func RegisterLeadsHandler(s server.Server, hdlr LeadsHandler, opts ...server.HandlerOption) error {
	type leads interface {
		Add(ctx context.Context, in *LeadsDTO, out *Response) error
		Delete(ctx context.Context, in *DeleteId, out *Response) error
		Update(ctx context.Context, in *LeadsDTO, out *Response) error
		GetList(ctx context.Context, in *LeadsCondition, out *Response) error
	}
	type Leads struct {
		leads
	}
	h := &leadsHandler{hdlr}
	return s.Handle(s.NewHandler(&Leads{h}, opts...))
}

type leadsHandler struct {
	LeadsHandler
}

func (h *leadsHandler) Add(ctx context.Context, in *LeadsDTO, out *Response) error {
	return h.LeadsHandler.Add(ctx, in, out)
}

func (h *leadsHandler) Delete(ctx context.Context, in *DeleteId, out *Response) error {
	return h.LeadsHandler.Delete(ctx, in, out)
}

func (h *leadsHandler) Update(ctx context.Context, in *LeadsDTO, out *Response) error {
	return h.LeadsHandler.Update(ctx, in, out)
}

func (h *leadsHandler) GetList(ctx context.Context, in *LeadsCondition, out *Response) error {
	return h.LeadsHandler.GetList(ctx, in, out)
}
